import { escape } from 'querystring';

import * as sendgridMail from '@sendgrid/mail';
import { NextApiRequest, NextApiResponse } from 'next';
import { Octokit } from 'octokit';

import { Result } from '../../../src/constants/Interfaces';

sendgridMail.setApiKey(process.env.SENDGRID_API_KEY || '');

// Create a personal access token at https://github.com/settings/tokens/new?scopes=repo
const octokit = new Octokit({ auth: process.env.GITHUB_PERSONAL_ACCESS_TOKEN });

// Compare: https://docs.github.com/en/rest/reference/users#get-the-authenticated-user

export interface FeedbackData {
  reason: string;
  details: string;
  result: Result;
  language: string;
}

export default async function feedbackAPI(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const data: FeedbackData = JSON.parse(req.body);

  const lines = data.result.lines.reduce((acc, cur) => {
    const line = cur.words.reduce((accwords, curwords) => {
      const word = curwords.syllables.reduce((accsyll, cursyll) => {
        const syllable = cursyll.text.trim().split('\n');

        return `${accsyll}${syllable}`;
      }, '');

      if (accwords !== '') return `${accwords} ${word}`;
      return word;
    }, '');

    return [...acc, line];
  }, [] as string[]);

  const placeholder = (s: string) => s || '[none]';

  // === MARKDOWN ===
  const hasText =
    lines.length > 0 && lines.filter((line) => line.length !== 0).length > 0;

  const linesToLink = escape(lines.join('\n'));
  const transcriptionLink = hasText
    ? `([View Transcription](https://www.openipa.org/transcription/french?text=${linesToLink}))`
    : '';

  const markdown = `## Details
${placeholder(data.details)}

## ${
    data.language[0].toUpperCase() + data.language.substring(1)
  } Text ${transcriptionLink}
${!hasText ? 'No text provided.' : lines.map((line) => `> ${line}`).join('\n')}
  
---

This is an autogenerated issue created from an Open IPA feedback form submission. The form is accessible at https://www.openipa.org/transcription.`;

  const issueResponse = await octokit.rest.issues.create({
    owner: 'hfellerhoff',
    repo: 'openipa',
    title: data.details
      ? `${
          data.details.length > 80
            ? data.details.substring(0, 77) + '...'
            : data.details
        }`
      : `${data.reason}`,
    body: markdown,
    labels: [
      {
        name: 'feedback',
      },
      {
        name:
          data.reason === 'Transcription Error'
            ? 'transcription'
            : 'miscellaneous',
      },
      {
        name: data.language,
      },
    ],
  });

  const issueURL = `${issueResponse.data.html_url}`;

  // EMAIL
  const fieldHTML = `<h4>Issue URL: ${issueURL}</h4>
<h4>Feedback Reason: ${data.reason}</h4><br>
<h4>Details</h4><br><span>${placeholder(data.details)}</span><br><br>`;

  const linesHTML = `<h4>Inputted Text</h4><br><span>${lines
    .map((line) => line)
    .join('<br/>')}</span>`;

  const html = `${fieldHTML}${linesHTML}`;

  const msg: sendgridMail.MailDataRequired = {
    to: 'henryfellerhoff@gmail.com',
    from: 'team@posto.page',
    subject: 'Feedback Form Submission: Open IPA',
    content: [
      {
        type: 'text/html',
        value: html,
      },
    ],
  };

  await sendgridMail.send(msg).catch(() => {
    res.status(400).json({ error: 'something went wrong :(' });
  });

  res.status(201).json({
    url: issueURL,
  });
}
